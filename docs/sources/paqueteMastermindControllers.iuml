@startuml

abstract class mastermind.controllers.AcceptorController [[java:jprieto.mastermind.controllers.AcceptorController]] {
	~AcceptorController(Session session)
	+{abstract}void accept(ControllerVisitor controllersVisitor)
}
mastermind.controllers.Controller <|-- mastermind.controllers.AcceptorController

class mastermind.controllers.ActionController [[java:jprieto.mastermind.controllers.ActionController]] {
	-SessionImplementation sessionImplementation
	+ActionController(Session session)
	+boolean isLooser()
	+boolean isWinner()
	+void addProposedCombination(List<Color> colors)
	+Error getProposedCombinationError(List<Color> colors)
	+int getAttempts()
	+List<Color> getColors(int position)
	+int getBlacks(int position)
	+int getWhites(int position)
	+int getWidth()
}
mastermind.controllers.Controller <|-- mastermind.controllers.ActionController
mastermind.controllers.ActionController *-down-> mastermind.models.SessionImplementation

abstract class mastermind.controllers.Controller [[java:jprieto.mastermind.controllers.Controller]] {
	#Session session
	~Controller(Session session)
	+StateValue getValueState()
	+int getWidth()
}
mastermind.controllers.Controller *-down-> mastermind.models.Session

interface mastermind.controllers.ControllerVisitor [[java:jprieto.mastermind.controllers.ControllerVisitor]] {
	void visit(StartController startController)
	void visit(PlayController playController)
	void visit(ResumeController resumeController)
}

class mastermind.controllers.Logic [[java:jprieto.mastermind.controllers.Logic]] {
	#Session session
	#Map<StateValue,AcceptorController> controllers
	#Logic()
	+AcceptorController getController()
}
mastermind.controllers.Logic *-down-> mastermind.models.Session
mastermind.controllers.Logic *-down-> mastermind.types.StateValue
mastermind.controllers.Logic *-down-> mastermind.controllers.AcceptorController
mastermind.controllers.Logic *-down-> java.util.HashMap

abstract class mastermind.controllers.PlayController [[java:jprieto.mastermind.controllers.PlayController]] {
	+PlayController(Session session)
	+{abstract}boolean isLooser()
	+{abstract}boolean isWinner()
	+{abstract}void addProposedCombination(List<Color> colors)
	+{abstract}Error getProposedCombinationError(List<Color> colors)
	+{abstract}int getAttempts()
	+{abstract}List<Color> getColors(int position)
	+{abstract}int getBlacks(int position)
	+{abstract}int getWhites(int position)
	+{abstract}void undo()
	+{abstract}boolean undoable()
	+{abstract}void redo()
	+{abstract}boolean redoable()
	+{abstract}int getWidth()
	+void accept(ControllerVisitor controllersVisitor)
}
mastermind.controllers.AcceptorController <|-- mastermind.controllers.PlayController
mastermind.controllers.PlayController ..> mastermind.controllers.ControllerVisitor

class mastermind.controllers.RedoController [[java:jprieto.mastermind.controllers.RedoController]] {
	-SessionImplementation sessionImplementation
	+RedoController(Session session)
	+void redo()
	+boolean redoable()
}
mastermind.controllers.Controller <|-- mastermind.controllers.RedoController
mastermind.controllers.RedoController *-down-> mastermind.models.SessionImplementation

abstract class mastermind.controllers.ResumeController [[java:jprieto.mastermind.controllers.ResumeController]] {
	+ResumeController(Session session)
	+{abstract}void resume(boolean isResumed)
	+void accept(ControllerVisitor controllerVisitor)
}
mastermind.controllers.AcceptorController <|-- mastermind.controllers.ResumeController
mastermind.controllers.ResumeController ..> mastermind.controllers.ControllerVisitor


abstract class mastermind.controllers.StartController [[java:jprieto.mastermind.controllers.StartController]] {
	+StartController(Session session)
	+{abstract}void initGame()
	+void accept(ControllerVisitor controllerVisitor)
}
mastermind.controllers.AcceptorController <|-- mastermind.controllers.StartController
mastermind.controllers.StartController ..> mastermind.controllers.ControllerVisitor


class mastermind.controllers.UndoController [[java:jprieto.mastermind.controllers.UndoController]] {
	-SessionImplementation sessionImplementation
	+UndoController(Session session)
	+void undo()
	+boolean undoable()
}
mastermind.controllers.Controller <|-- mastermind.controllers.UndoController
mastermind.controllers.UndoController *-down-> mastermind.models.SessionImplementation

@enduml