@startuml

class mastermind.models.Board [[java:jprieto.mastermind.models.Board]] {
	-SecretCombination secretCombination
	-List<ProposedCombination> proposedCombinations
	-List<Result> results
	-int attempts
	+Board()
	-Board(Board board)
	+Board copy()
	+void clear()
	+void addProposedCombination(List<Color> colors)
	+int getAttempts()
	+Result getResult(int position)
	+ProposedCombination getProposedCombination(int position)
	+SecretCombination getSecretCombination()
	+List<Color> getColors(int position)
	+int getBlacks(int position)
	+int getWhites(int position)
	+int getWidth()
	+void putSecretCombination(SecretCombination secretCombination)
	+void putProposedCombinations(int attempts, List<ProposedCombination> proposedCombinations)
	+void putResults(List<Result> results)
}
mastermind.models.Board *-down-> mastermind.models.SecretCombination
mastermind.models.Board *-down-> mastermind.models.ProposedCombination
mastermind.models.Board *-down-> mastermind.models.Result

abstract class mastermind.models.Combination [[java:jprieto.mastermind.models.Combination]] {
	-{static}int WIDTH
	#List<Color> colors
	#Combination()
	+{static}int getWidth()
	+{abstract}Combination copy()
}
mastermind.models.Combination *-down-> mastermind.types.Color

class mastermind.models.Game [[java:jprieto.mastermind.models.Game]] {
	-{static}int MAX_LONG
	-Board board
	+Game()
	+void clear()
	+void addProposedCombination(List<Color> colors)
	+boolean isLooser()
	+boolean isWinner()
	+int getAttempts()
	+List<Color> getColors(int position)
	+int getBlacks(int position)
	+int getWhites(int position)
	+int getWidth()
	+GameMemento createMemento()
	+void set(GameMemento memento)
	+void newGame()
}
mastermind.models.Game *-down-> mastermind.models.Board

class mastermind.models.GameMemento [[java:jprieto.mastermind.models.GameMemento]] {
	-Board board
	~GameMemento(Board board)
	~Board getBoard()
}
mastermind.models.GameMemento *-down-> mastermind.models.Board

class mastermind.models.GameRegistry [[java:jprieto.mastermind.models.GameRegistry]] {
	-List<GameMemento> mementos
	-Game game
	-int firstPrevious
	~GameRegistry(Game game)
	~void register()
	~void undo()
	~void redo()
	~boolean isUndoable()
	~boolean isRedoable()
	~void reset()
}
mastermind.models.GameRegistry *-down-> mastermind.models.GameMemento
mastermind.models.GameRegistry *-down-> mastermind.models.Game

class mastermind.models.ProposedCombination [[java:jprieto.mastermind.models.ProposedCombination]] {
	~ProposedCombination(List<Color> colors)
	-ProposedCombination(ProposedCombination proposedCombination)
	~boolean contains(Color color, int position)
	~boolean contains(Color color)
	+ProposedCombination copy()
}
mastermind.models.Combination <|-- mastermind.models.ProposedCombination

class mastermind.models.Result [[java:jprieto.mastermind.models.Result]] {
	-int blacks
	-int whites
	~Result(int blacks, int whites)
	-Result(Result result)
	~boolean isWinner()
	~int getBlacks()
	~int getWhites()
	~Result copy()
}

class mastermind.models.SecretCombination [[java:jprieto.mastermind.models.SecretCombination]] {
	~SecretCombination()
	-SecretCombination(SecretCombination secretCombination)
	~Result getResult(ProposedCombination proposedCombination)
	+SecretCombination copy()
}
mastermind.models.Combination <|-- mastermind.models.SecretCombination

interface mastermind.models.Session [[java:jprieto.mastermind.models.Session]] {
	StateValue getValueState()
	int getWidth()
}

class mastermind.models.SessionImplementation [[java:jprieto.mastermind.models.SessionImplementation]] {
	-Game game
	-GameRegistry registry
	-State state
	+SessionImplementation()
	+void addProposedCombination(List<Color> colors)
	+StateValue getValueState()
	+int getWidth()
	+void next()
	+void newGame()
	+boolean isLooser()
	+boolean isWinner()
	+void undo()
	+boolean undoable()
	+void redo()
	+boolean redoable()
	+int getAttempts()
	+List<Color> getColors(int position)
	+int getBlacks(int position)
	+int getWhites(int position)
}
mastermind.models.SessionImplementation *-down-> mastermind.models.Game
mastermind.models.SessionImplementation *-down-> mastermind.models.GameRegistry
mastermind.models.SessionImplementation *-down-> mastermind.models.State
mastermind.models.Session <|.. mastermind.models.SessionImplementation

class mastermind.models.State [[java:jprieto.mastermind.models.State]] {
	-StateValue stateValue
	+State()
	+void next()
	+void reset()
	+StateValue getValueState()
}
mastermind.models.State *-down-> mastermind.models.StateValue

@enduml